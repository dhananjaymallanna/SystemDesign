<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on My New Hugo Site</title><link>http://localhost:1313/</link><description>Recent content in Introduction on My New Hugo Site</description><generator>Hugo 0.125.0</generator><language>en-us</language><lastBuildDate>Sun, 28 Sep 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml"/><item><title>With ToC</title><link>http://localhost:1313/docs/example/table-of-contents/with-toc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/with-toc/</guid><description>Caput vino delphine in tamen vias # Cognita laeva illo fracta # Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.
Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit Natus quaerere # Pectora et sine mulcere, coniuge dum tincta incurvae.</description></item><item><title>Without ToC</title><link>http://localhost:1313/docs/example/table-of-contents/without-toc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/without-toc/</guid><description>At me ipso nepotibus nunc celebratior genus # Tanto oblite # Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.
Quam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque.</description></item><item><title>Creating a New Theme</title><link>http://localhost:1313/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>http://localhost:1313/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>http://localhost:1313/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>http://localhost:1313/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>http://localhost:1313/docs/example/collapsed/3rd-level/4th-level/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/collapsed/3rd-level/4th-level/</guid><description>4th Level of Menu # Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.
Venasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto!</description></item><item><title/><link>http://localhost:1313/docs/example/hidden/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/hidden/</guid><description>This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.
Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem.</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/buttons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/buttons/</guid><description> Buttons # Buttons are styled links that can lead to local page or external link.
Example # {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}} Get Home Contribute</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/columns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/columns/</guid><description>Columns # Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Mid Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Right Content Lorem markdownum insigne... {{&amp;lt; /columns &amp;gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/details/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/details/</guid><description>Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.
Example # {{&amp;lt; details &amp;#34;Title&amp;#34; [open] &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} {{&amp;lt; details title=&amp;#34;Title&amp;#34; open=true &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} Title Markdown content # Lorem markdownum insigne&amp;hellip;</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/expand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/expand/</guid><description>Expand # Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.
Example # Default # {{&amp;lt; expand &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}} Expand ↕ Markdown content # Lorem markdownum insigne&amp;hellip;
With Custom Label # {{&amp;lt; expand &amp;#34;Custom Label&amp;#34; &amp;#34;...&amp;#34; &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}} Custom Label ... Markdown content # Lorem markdownum insigne.</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/hints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/hints/</guid><description>Hints # Hint shortcode can be used as hint/alerts/notification block.
There are 3 colors to choose: info, warning and danger.
{{&amp;lt; hint [info|warning|danger] &amp;gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{&amp;lt; /hint &amp;gt;}} Example # Markdown content
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/mermaid/</guid><description>Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.
Override Mermaid Initialization Config
To override the initialization config for Mermaid, create a mermaid.json file in your assets folder!
Example # {{&amp;lt; mermaid class=&amp;#34;optional&amp;#34; &amp;gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --&amp;gt; State2 note left of State2 : This is the note to the left.</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/section/first-page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/section/first-page/</guid><description>First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/section/second-page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/section/second-page/</guid><description>Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description></item><item><title/><link>http://localhost:1313/docs/shortcodes/tabs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/tabs/</guid><description>Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.
{{&amp;lt; tabs &amp;#34;uniqueid&amp;#34; &amp;gt;}} {{&amp;lt; tab &amp;#34;MacOS&amp;#34; &amp;gt;}} # MacOS Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Linux&amp;#34; &amp;gt;}} # Linux Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Windows&amp;#34; &amp;gt;}} # Windows Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; /tabs &amp;gt;}} Example # MacOS MacOS # This is tab MacOS content.
Lorem markdownum insigne. Olympo signis Delphis!</description></item><item><title>airline checkin</title><link>http://localhost:1313/docs/example/table-of-contents/problems/airline-checkin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/airline-checkin/</guid><description>Design Airline Check-in System Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # When you book your tickets with an airline you are required to complete the payment and confirm your reservation. Once the reservation is complete then you can either optionally do a web check-in and confirm your seats or just before your departure do a physical check-in at the airport.</description></item><item><title>blogging platform</title><link>http://localhost:1313/docs/example/table-of-contents/problems/blogging-platform/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/blogging-platform/</guid><description>Design a Blogging Platform # Design a Blogging Platform Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Design a simple multi-user publishing/blogging platform, allowing writers to publish and manage the blogs under their personal publication and readers to read them.
Requirements # The problem statement is something to start with, be creative and dive into the product details and add constraints and features you think would be important.</description></item><item><title>counting impressions</title><link>http://localhost:1313/docs/example/table-of-contents/problems/counting-impressions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/counting-impressions/</guid><description>Design Counting Impressions at Scale # Design Counting Impressions at Scale Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Whenever an ad is displayed to you on any website it is counted as an impression. In simple terms, anytime something is shown to you it is treated as an impression in the backend. We have to build a system that counts the impression an ad gets at scale.</description></item><item><title>distributed cache</title><link>http://localhost:1313/docs/example/table-of-contents/problems/distributed-cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/distributed-cache/</guid><description>Design a Distributed Cache # Design a Distributed Cache Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Design a single node cache and then scale it out to be distributed. We keep this cache simple and hence it should support operations as simple as
GET: To get a key from the cache PUT: To put a key in the cache DEL: To delete a key from the cache TTL: To set an expiry for a key While designing the cache it is very important to note that the cache should be highly available and scalable.</description></item><item><title>faster superfast kv</title><link>http://localhost:1313/docs/example/table-of-contents/problems/faster-superfast-kv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/faster-superfast-kv/</guid><description>Design a faster Superfast KV Store # Design a faster Superfast KV Store Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # We designed a Superfast KV Store, but can we go faster than this? Let&amp;rsquo;s try to model something that is faster than this superfast DB.
Design a single-node persistent KV Store that supports GET, PUT and DEL operations and it utilizes hardware (disk, RAM) optimally.</description></item><item><title>file sync</title><link>http://localhost:1313/docs/example/table-of-contents/problems/file-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/file-sync/</guid><description>Design a Remote File Sync Service # Design a Remote File Sync Service Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Designing a file sync service in which a user can upload a file to the cloud and it gets sync across all of his/her devices.
The core of this system finds its application in messaging apps as well.</description></item><item><title>flash sale</title><link>http://localhost:1313/docs/example/table-of-contents/problems/flash-sale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/flash-sale/</guid><description>Design Flash Sale # Design Flash Sale Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Design flash sale that supports sale of a fixed inventory in a very short amount of time.
The flow of the sale to be supported by the system is
flash sale announced for XPhone the flash sale aims to sell 1000 XPhones [fixed inventory] user can buy only one XPhone during the sale user waits for the flash sale to start flash sale starts the first 1000 are allowed to add XPhones to their cart the user is given a time of 5 minutes to make the payment if user completes the payment within 5 minutes, the XPhone is sold to that user if the payment fails, the XPhone is allowed to be purchased by other users Note: Flash Sale and Ticket booking systems have the exact same flow; the only thing that varies is the expected througput and scale.</description></item><item><title>hashtag service</title><link>http://localhost:1313/docs/example/table-of-contents/problems/hashtag-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/hashtag-service/</guid><description>Design the HashTag Service # Design the HashTag Service Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Say you own a social network in which people upload photos and with each upload people can provide a list of HashTags as part of the caption. Build a service that manages the hashtags along with it it helps us render a HashTag page that shows</description></item><item><title>image service</title><link>http://localhost:1313/docs/example/table-of-contents/problems/image-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/image-service/</guid><description>Design an Image Service # Design an Image Service Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Design an image service that takes care of uploading, sering and optimizing images at scale of 5 million image upload every hour. The image optimization will be specific to the device requesting it.</description></item><item><title>KaTeX</title><link>http://localhost:1313/docs/shortcodes/katex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/shortcodes/katex/</guid><description>KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX
Example # {{&amp;lt; katex display=true class=&amp;#34;optional&amp;#34; &amp;gt;}} f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi {{&amp;lt; /katex &amp;gt;}} \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\] Display Mode Example # Here is some inline example: \(\pi(x)\) , rendered in the same line. And below is display example, having display: block \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\] Text continues here.</description></item><item><title>live commentary</title><link>http://localhost:1313/docs/example/table-of-contents/problems/live-commentary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/live-commentary/</guid><description>Design Text-based Live Commentary # Design Text-based Live Commentary Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Design a service that serves text-based commentary to a live Cricket Match. The commentary has to be a ball-by-ball which is written by a professional commentator and the service has to serve the commentary through the website to anyone who wants to read it.</description></item><item><title>load balancer</title><link>http://localhost:1313/docs/example/table-of-contents/problems/load-balancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/load-balancer/</guid><description>Design a Load Balancer # Design a Load Balancer Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Design a load balancer that acts as a Reverse Proxy and balances the load across multiple configured backend servers.
Requirements # The problem statement is something to start with, be creative and dive into the product details and add constraints and features you think would be important.</description></item><item><title>near me</title><link>http://localhost:1313/docs/example/table-of-contents/problems/near-me/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/near-me/</guid><description>Design Who&amp;rsquo;s Near Me Service # Design something awesome Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Given k kilometers as an input, find all the people who are within k kilometers from you, efficiently.
The core of this system can be used in locating stores near me, landmarks near me, nearby friends, electric vehicles near me, cars near me, etc.</description></item><item><title>newly unread indicator</title><link>http://localhost:1313/docs/example/table-of-contents/problems/newly-unread-indicator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/newly-unread-indicator/</guid><description>Design Newly Unread Message Indicator # Design Newly Unread Message Indicator Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # This service/feature will inform users about presence of new messages. The number in the indicator is the total number of unique users from which the user has received the message.</description></item><item><title>onepic</title><link>http://localhost:1313/docs/example/table-of-contents/problems/onepic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/onepic/</guid><description>Design OnePic # Design OnePic Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # OnePic is a product that makes it easy to use one profile picture everywhere. The product let&amp;rsquo;s you have one unique URL that when any website uses under img tag renders the image on the page.</description></item><item><title>online offline indicator</title><link>http://localhost:1313/docs/example/table-of-contents/problems/online-offline-indicator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/online-offline-indicator/</guid><description>Design an Online Offline Indicator # Design an Online Offline Indicator Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Imagine you are building a chat application in which a user can chat with any other user, provided they are both connected. For a user to initiate the chat, it is always helpful if we show who all are online.</description></item><item><title>queue consumers</title><link>http://localhost:1313/docs/example/table-of-contents/problems/queue-consumers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/queue-consumers/</guid><description>Design Synchronized Queue Consumers # Design Synchronized Queue Consumers Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Say there exists a very blunt remote queue and whenever the consumers makes a network call to fetch the head of the queue, the queues removes the element and returns it. The queue does not give any protection for concurrent consumers, which means it is possible for two consumers to fetch the front of the queue and the queue returning them the same element.</description></item><item><title>realtime claps</title><link>http://localhost:1313/docs/example/table-of-contents/problems/realtime-claps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/realtime-claps/</guid><description>Design Realtime Claps # Design Realtime Claps Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Imagine you have a publishing platform where writers write articles and readers read them. To appreciate the quality content, the readers clap for the article by clicking the clap button present next to the article.</description></item><item><title>realtime db</title><link>http://localhost:1313/docs/example/table-of-contents/problems/realtime-db/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/realtime-db/</guid><description>Design a Realtime Database # Design a Realtime Database Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Design a modern realtime KV database that sends realtime updates to all the users connected to it. Users subscribe to tables and anytime a KV is added, updated, or deleted the change is broadcasted to all the users, updating their view/application in realtime.</description></item><item><title>recent searches</title><link>http://localhost:1313/docs/example/table-of-contents/problems/recent-searches/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/recent-searches/</guid><description>Design Recent Searches # Design Recent Searches Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # When a user taps on the search bar we have to show the last 10 unique recent searches made by him/her. The time for the service to respond should be as low as possible given that user upon tapping the search bar would not want to wait for recent searches to load.</description></item><item><title>s3</title><link>http://localhost:1313/docs/example/table-of-contents/problems/s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/s3/</guid><description>Design S3 # Design S3 Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Design a scalable blob storage like Amazon&amp;rsquo;s S3. S3 is a distributed file storage facilitating storage of blob data. In simpler terms, it could be described as the folder on the cloud. The various functions to think about while designing something as robust as S3 are: scaling API requests, scaling storage, durability, handling hot storage nodes, cost efficiency, disk utilization, data redundancy, data corruption, and permission management.</description></item><item><title>sql broker</title><link>http://localhost:1313/docs/example/table-of-contents/problems/sql-broker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/sql-broker/</guid><description>Design a SQL backed Message Broker # Design a SQL backed Message Broker Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Design a SQL backed Message Broker which allows clients to enqueue messages (max 4KB in size) and dequeue them. The broker should support multiple producers and multiple consumers at the same time allowing the broker to function at high throughput.</description></item><item><title>sql kv</title><link>http://localhost:1313/docs/example/table-of-contents/problems/sql-kv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/sql-kv/</guid><description>Design SQL backed KV Store # Design SQL backed KV Store Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Design a KV Store built on top of a SQL (relational) database. The store exposes APIs to GET, PUT, DEL keys. Along with these core functiona, there should be an API to set TTL to an existing key, post which the key is auto-deleted from the store.</description></item><item><title>superfast kv</title><link>http://localhost:1313/docs/example/table-of-contents/problems/superfast-kv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/superfast-kv/</guid><description>Design a Superfast KV Store # Design a Superfast KV Store Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Design a single-node persistent KV Store that supports GET, PUT and DEL operations and it utilizes hardware (disk, RAM) optimally. The response time for all the 3 operations should be as low as possible and complexity of operations should be O(1).</description></item><item><title>tagging photos with people</title><link>http://localhost:1313/docs/example/table-of-contents/problems/tagging-photos-with-people/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/tagging-photos-with-people/</guid><description>Design Photo Tagging # Design Photo Tagging Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Design a feature that allows users to tag other users in photos they upload. Users can optionally select a rectangular region of the photo and tag it with the person. By default a small square should be picked as the region of interest.</description></item><item><title>task scheduler</title><link>http://localhost:1313/docs/example/table-of-contents/problems/task-scheduler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/task-scheduler/</guid><description>Design a Distributed Task Scheduler # Design a Distributed Task Scheduler Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Design a distributed task scheduler in which the client can register a task and the time at which it should be executed. The task needs to be picked up within 10 second of its scheduled time of execution.</description></item><item><title>text search engine</title><link>http://localhost:1313/docs/example/table-of-contents/problems/text-search-engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/text-search-engine/</guid><description>Design a Text-based Search Engine # Design a Text-based Search Engine Problem Statement Requirements Core Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Design a dead-simple text-based search engine that serves relevant results without using any tooling like ElasticSearch. The idea is to understand the internals of Search Engine and the math behind TF-IDF. Extend your search engine to support boolean expressions, typo tolerance, phonetics, and anything that you find amusing.</description></item><item><title>user affinity</title><link>http://localhost:1313/docs/example/table-of-contents/problems/user-affinity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/user-affinity/</guid><description>Design User Affinity # Design User Affinity Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Every social network has some notion for friends/followers/connections that defines affinity of one user to another. So, let&amp;rsquo;s design user affinity your social network that operates at scale.
Say, our social network has a notion of follow and every user can follow every other user.</description></item><item><title>video pipeline</title><link>http://localhost:1313/docs/example/table-of-contents/problems/video-pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/video-pipeline/</guid><description>Design a Video Processing Pipeline for Streaming Service # Design a Video Processing Pipeline for Streaming Service Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Design a video processing pipeline for a Video Streaming service starting from upload, storage, process, post-process, on-demand processing, and caching. The core of this problem statement is to design the system in such a way that the processing of videos post upload is done with massive parellization.</description></item><item><title>word dictionary</title><link>http://localhost:1313/docs/example/table-of-contents/problems/word-dictionary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/example/table-of-contents/problems/word-dictionary/</guid><description>Design a Word Dictionary # Design a Word Dictionary Problem Statement Requirements Core Requirements High Level Requirements Micro Requirements Output Design Document Prototype Recommended Tech Stack Keep in mind Outcome You&amp;rsquo;ll learn Share and shoutout Problem Statement # Design a service that serves English Word Dictionary. The service exposes endpoints for getting the meaning given the word. The dictionary is weekly updated through a changelog which has the words and meanings that needs to be updated and this changelog will contain at max 1000 words.</description></item></channel></rss>